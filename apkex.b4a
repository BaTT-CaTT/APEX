Version=6.8
NumberOfModules=5
Module1=sett
Module2=Starter
Module3=KeyValueStore
Module4=ClsCheckList
Module5=ClsExplorer
Build1=APK_Extractor,com.apex,Full
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="18" android:targetSdkVersion="22"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>~\n~<uses-permission ~\n~android:name="android.launcher.permission.INSTALL_SHORTCUT"/>~\n~<uses-permission ~\n~ android:name="android.permission.GET_PACKAGE_SIZE"/>~\n~<uses-permission~\n~  android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>~\n~<uses-permission~\n~  android:name="android.permission.READ_EXTERNAL_STORAGE"/>~\n~<uses-permission~\n~  android:name="android.permission.WRITE_SECURE_SETTINGS"/>~\n~<uses-permission~\n~ android:name="android.permission.PACKAGE_USAGE_STATS"/>~\n~<uses-permission~\n~  android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>~\n~  )~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~SetApplicationAttribute(android:theme, "@style/MyAppTheme")~\n~'SetApplicationAttribute(android:theme, "@style/Theme.AppCompat")~\n~~\n~CreateResource(values, theme.xml,~\n~<resources>~\n~    <style name="MyAppTheme" parent="Theme.AppCompat">~\n~        <item name="colorPrimary">#37474F</item>~\n~        <item name="colorPrimaryDark">#37474F</item>~\n~        <item name="colorAccent">#76FF03</item>~\n~        <item name="windowNoTitle">true</item>~\n~        <item name="windowActionBar">false</item>~\n~    </style>~\n~</resources>~\n~)~\n~'End of default text.~\n~
IconFile=
NumberOfFiles=8
File1=2.bal
File2=add-3.png
File3=info.png
File4=menu-1.png
File5=Minus Red Button.png
File6=minus.png
File7=sett.bal
File8=warning.png
NumberOfLibraries=28
Library1=core
Library2=appcompat
Library3=materialcolors
Library4=circlebutton
Library5=customtoast
Library6=materialdialogs
Library7=dialogs
Library8=phone
Library9=phonestatelistener
Library10=reflection
Library11=javaobject
Library12=randomaccessfile
Library13=loadingviews
Library14=scrollview2d
Library15=animation
Library16=betterdialogs
Library17=b4xencryption
Library18=maskededittext
Library19=sql
Library20=intent id
Library21=mlfiles
Library22=fileselect
Library23=bcmaterial
Library24=body3d
Library25=bodygl
Library26=designsupport
Library27=materiallockview
Library28=materialdialogsv7
@EndOfDesignText@
'APEX Source Code 1.4 by D.Trojan(trOw)
#Region  Project Attributes 
	#ApplicationLabel: APEX(App Extractor)
	#VersionCode: 9
	#VersionName: 1.3
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait 
	#CanInstallToExternalStorage: False
#End Region
#AdditionalRes:C:\Users\trow\Documents\Apps\Worground\APK-Extractor\res
#Extends: android.support.v7.app.ActionBarActivity
#Extends: de.amberhome.materialdialogs.MaterialDialogsActivity
'#AdditionalJar: C:\Users\trow\Documents\Apps\Worground\APK Extractor\jdbc_driver\sqlite-jdbc-3.7.2
'#AdditionalJar: bcprov-jdk15on-154
#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Private pak As PackageManager
	Dim tim As Timer
	
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	'These variables can only be accessed from this module.
	Private applist,extra,extra2,finish As List 
	Private toolbar As ACToolBarDark
	Dim ABHelper As ACActionBar
	Dim AC As AppCompat
	Private ListView1 As ListView
	Dim args(1) As Object
	Dim Obj1, Obj2, Obj3 As Reflector
	Dim size,flags As Int
	Private name,apath,l,Types(1),packName As String
	Private icon As BitmapDrawable
	Private mcl As MaterialColors
	Private ab1 As ACButton
	Private ab2 As ACButton
	Private Panel1 As Panel
	Private Label1 As Label
	Private lvt As LVLineWithText
	Private lvt2 As LVLineWithText
	Private iv1 As ImageView
	Private Label2 As Label
	Private Label3 As Label
	Private Panel2 As Panel
	Private ab3 As ACButton
'	Private pb1 As ProgressBar
	Private Label5 As Label
	Dim count As Int
	Private md As MaterialDialogBuilder
	Private Label6 As Label
	Private Bname As Label
	Dim bdia As BetterDialogs
	Dim dias As CustomDialog2
	Private Label4 As Label
	Private Bpath As Label
	Private Bcontent As Label
	Dim ie As INTENTID
	Dim dlgFileExpl As ClsExplorer
	Dim dir As String = File.DirRootExternal&"/APEX"
	Private datas As KeyValueStore
	Private apannel,bpannel As Panel
	Dim b1 As Button
End Sub

Sub Activity_Create(FirstTime As Boolean)
	
	Activity.LoadLayout("2")
	toolbar.SetAsActionBar
'	'toolbar.Menu.Add(0, 0, "Dummy", Null)
''	toolbar.InitMenuListener
	toolbar.PopupTheme=toolbar.THEME_DARK
	toolbar.Title=pak.GetApplicationLabel("com.apex")
	toolbar.SubTitle="Version "&pak.GetVersionName("com.apex")
	ABHelper.Initialize
	extra.Initialize
	extra2.Initialize
	finish.Initialize
	md.Initialize("md")
	ie.Initialize
	b1.Initialize("b1")
	lvt2.Initialize("lvt2")
	Bname.Initialize("bname")
	Bpath.Initialize("Bpath")
	Bcontent.Initialize("bcontent")
	datas.Initialize(File.DirDefaultExternal,"datastore_1")
	If FirstTime Then 
		File.MakeDir(File.DirRootExternal,"APEX/id")
		datas.PutSimple("0",dir) 
		
	End If
	'Dim xml As XmlLayoutBuilder
	Dim bd,bd1,bd2 As BitmapDrawable
	bd1.Initialize(LoadBitmap(File.DirAssets,"menu-1.png"))
	'Activity.AddMenuItem3("Menu", "Menu", bd1.Bitmap, True)
	bd.Initialize(LoadBitmap(File.DirAssets,"info.png"))
	Activity.AddMenuItem3("Info", "inf", bd.Bitmap,True)
	Activity.AddMenuItem("Settings","sett")
	bd2.Initialize(LoadBitmap(File.DirAssets,"Minus Red Button.png"))
	Activity.AddMenuItem3("Exit", "close",bd2.Bitmap,True)
	'############################################################# List Methods #####################
	Dim l1,l2 As Label 
	l1=ListView1.TwoLinesAndBitmap.Label
	l2=ListView1.TwoLinesAndBitmap.SecondLabel
	l1.TextSize=19
	l1.TextColor=mcl.md_amber_A400
	l2.TextSize=14
	l2.TextColor=mcl.md_white_1000
	ListView1.TwoLinesAndBitmap.ItemHeight=65dip
	ListView1.TwoLinesAndBitmap.ImageView.Height=50dip
	ListView1.Color=Colors.Transparent
	SetDivider(ListView1, Colors.ARGB(255,255,255,255), 1dip)
	'########################################################### Button & label Methods #######################
	Panel1.Visible=False
	Panel2.Visible=False
	lvt.Visible=False
	lvt.Color=Colors.Transparent
	Panel2.Color=mcl.md_grey_800
	ab1.Text="Export"
	ab1.ButtonColor=mcl.md_amber_A700
	ab1.TextColor=mcl.md_black_1000
	ab2.Text="Cancel"
	'ab2.ButtonColor=Colors.ARGB(
	ab2.TextColor=mcl.md_black_1000
	ab3.Text="cancel"
	ab3.TextColor=mcl.md_red_700
	ab3.ButtonColor=Colors.ARGB(200,255,255,255)
	Activity.Color=Colors.ARGB(255,55,71,79)
	'########################################################## Extractor Init and Methods #############
	'############### Pannel Methods#####################################################################
	'set the atrributes to the single Panel e.g size and colors
	bpannel.Initialize("bpannel")
	bpannel.Color=mcl.md_blue_grey_700
	bpannel.AddView(Bname,0dip,1dip,100%x,60dip)
	bpannel.AddView(Bcontent,0dip,40dip,100%x,40dip)
	bpannel.AddView(Bpath,0dip,80dip,100%x,50dip)
	'
	'#################################################################Pannel EXTRA Methods##############
	Bname.TextSize=18
	Bname.TextColor=mcl.md_amber_500
	Bpath.TextSize=18
	Bpath.Gravity=Gravity.LEFT
	Bpath.TextColor=mcl.md_cyan_A200
	'Bcontent.Text="Export the APK to:"
	Bcontent.TextColor=mcl.md_white_1000
	Bcontent.Gravity=Gravity.LEFT
	Bcontent.TextSize=15
	Bcontent.Enabled=True
	'b1.Text="Cancel"
	
	'###################################################################################################
	tim.Initialize("tim",1000)
	count=0
	apps_start
End Sub

Sub Activity_Resume
	
End Sub

Sub Activity_Pause (UserClosed As Boolean)
'	tim.Enabled=False
End Sub
Sub Activity_BackKeyPressed As Boolean
	bdia.CloseDialog(DialogResponse.CANCEL)
	If dlgFileExpl.IsInitialized Then
		If dlgFileExpl.IsActive Then Return True
	End If
	Return bdia
End Sub

Sub sett_click
	StartActivity(sett)
End Sub

Sub inf_click
	md_build
	'Msgbox(pak.GetApplicationLabel("com.apex")&", Version: "&pak.GetVersionName("com.apex")&", build: "&pak.GetVersionCode("com.apex"),"About "&pak.GetApplicationLabel("com.apex"))
End Sub
Sub close_click
	ExitApplication
End Sub

Sub tim_Tick
	count=count+1
	'ProgressDialogShow("Export ->")
	lvt.Visible=True
	lvt.Value=count*10*2.5
    If count = 4 Then
		tim.Enabled=False
		count=0
		 ini_extract
	End If
End Sub
Sub Listview1_ItemLongClick (Position As Int, Value As Object)
	Dim lab As Label
	lab.Initialize("lab")
	Dim text As String = "Start the Application?"
	lab.TextSize=18
	lab.Gravity=Gravity.CENTER
	lab.TextColor=mcl.md_white_1000
	lab.Text=text
	Dim res As Int 
	res =bdia.CustomDialog("Start?",200dip,150dip,lab,250dip,80dip,2,Colors.Transparent,"OK","","Cancel",False,"bdia")
	If res=DialogResponse.POSITIVE Then 
	Dim i As Intent
	i.Initialize(extra.Get(Position),"")
	i = pak.GetApplicationIntent(extra.Get(Position))
	Try
		StartActivity(i)
	Catch
		'ToastMessageShow("no se puede",False)
	End Try
	Else
		ToastMessageShow("canceled..",False)
		
	End If 
End Sub

Sub ListView1_ItemClick (Position As Int, Value As Object) 
	Dim filename As String 
	For Each d As String In extra
		packName=d
		Log("packname. "&d)
	If Value=packName Then
		icon=pak.GetApplicationIcon(packName)
		size=File.Size(GetParentPath(GetSourceDir(GetActivitiesInfo(packName))),GetFileName(GetSourceDir(GetActivitiesInfo(packName))))
		apath=get_respath(d)
		name=pak.GetApplicationLabel(d)
	
		filename=d
		Log(filename)
		'Panel1.Visible=True	
			Label1.Text=name
			iv1.Bitmap=icon.Bitmap
			Label2.Text=filename
			Label6.Text=apath
			Label5.Text="size: "&FormatFileSize(size)
			
			Label3.Text="Path: "&apath
			extra2.Clear
			Log("-------clear-----")
			extra2.Add(name)
			extra2.Add(d)
			Log("->add: "&d)	
		ex_pan		
		'list_files
	End If
		'filename=GetParentPath(GetSourceDir(GetActivitiesInfo(d)))
	Next
End Sub

Sub ini_extract
	lvt.Visible=True
	Dim s As String = extra2.Get(1)
	Log("pak: "&s)
	Dim b As String = extra2.Get(0)
	Log("Name: "&b)
	name=b
	Label4.text=name
	Dim d1,d2,master As String 
	d1=File.DirRootExternal&"/APEX"
	d2=datas.GetSimple("0")
	If datas.ContainsKey("0") Then 
	master=d2
	End If 
		Log("copy value: "&s)
	If File.Exists(master,s&".apk") Then
		int_folder
	Else
		
		File.Copy(GetParentPath(GetSourceDir(GetActivitiesInfo(s))),GetFileName(GetSourceDir(GetActivitiesInfo(s))),master,s&".apk")
		end_extract
	End If		

End Sub
Sub end_extract
	tim.Enabled=False
	lvt.Visible=False
		ex_pan2
		end_msg
End Sub

Sub end_msg
	'ProgressDialogHide
	Dim lv1 As ListView
	lv1.Initialize("lv1")
	lv1.Enabled=True
	lv1.Color=Colors.Transparent
	Dim l1,l2 As Label 
	l1.Initialize("l1")
	l2.Initialize("l2")
	l1=lv1.TwoLinesAndBitmap.Label
	l2=lv1.TwoLinesAndBitmap.SecondLabel
	l1.TextSize=14
	l1.TextColor=Colors.White
	l2.TextSize=12
	l2.TextColor=mcl.md_light_blue_500
	Dim dirs As String 
	If datas.ContainsKey("0") Then
		dirs=datas.GetSimple("0")
	End If
	Dim s As String = extra2.Get(1)
	packName=s
	Dim e As String=extra2.get(0)
	name=e
	icon=pak.GetApplicationIcon(s)
	finish=File.ListFiles(dir)
		For u = 0 To finish.Size-1
			Log(finish.Get(u))
		
		Next
	'Msglv1.AddSingleLine("Export to: SD/APEX/backups/"&name&".apk")
	SetDivider(ListView1, Colors.White, 1dip)
	Label4.Text=name 
	
	Dim zu As Int 
	lv1.AddTwoLinesAndBitmap(name&" exported to:",dirs,icon.Bitmap)
	'lv1=GetActivitiesInfo(packName)
	zu=bdia.CustomDialog("Export log:",250dip,100dip,lv1,220dip,120dip,20,Colors.Transparent,"Backups","Ok","",False,"bdia")
	If zu=DialogResponse.POSITIVE Then
		
		dlgFileExpl.Initialize(Activity, dirs, ".apk", True, False, "OK")
		dlgFileExpl.FastScrollEnabled = True
		dlgFileExpl.Explorer2(True)
		If Not(dlgFileExpl.Selection.Canceled Or dlgFileExpl.Selection.ChosenFile = "") Then
			ToastMessageShow(name,False)
		End If
	End If
End Sub

Sub int_folder
	Dim error As String ="File allready exists!"
	Dim errorb As Label
	errorb.Initialize("errorb")
	errorb.Text=error
	errorb.Gravity=Gravity.CENTER
	errorb.TextColor=mcl.md_white_1000
	errorb.TextSize=18
	Dim tu As Int 
	bdia.CustomDialog("INFO:",200dip,150dip,errorb,220dip,100dip,1dip,Colors.Transparent,"OK","","",False,"bdia")
	'ex_pan
End Sub

Sub md_build
	md.Theme(md.THEME_DARK)
	md.CanceledOnTouchOutside(True)
	md.Cancelable(True)
	md.ContentColor(mcl.md_white_1000)
	md.content(pak.GetApplicationLabel("com.apex")&", Version: "&pak.GetVersionName("com.apex")&" | Build: "&pak.GetVersionCode("com.apex")&"| Welcome to APK Extractor short APEX. It's easy and fast to use, simply tap an app and tap EXPORT. In the settings you can specify an individual path to save. By pressing and holding down an app in the list, this starts after a query Unless otherwise set APEX save your backups under 'sd / APEX /' the app does not need a root. Please note that you can not export system apps with APEX! All Rights Reserved APEX ©2017")
	'md.Build.EnableActionButton("bu",True)
	md.PositiveText("Ok")
	md.ButtonStackedGravity(md.GRAVITY_Start)
	md.ForceStacking(True)
	md.ContentGravity(md.GRAVITY_START)
	md.Title("About APEX:")
	md.PositiveColor(mcl.md_white_1000)
	md.show
End Sub

Sub md_ButtonPressed (Dialog As MaterialDialog, Action As String)

	Select Action
		Case Dialog.ACTION_POSITIVE
			'Log("Positive Button pressed")
			'ToastMessageShow(Action, False)
		Case Dialog.ACTION_NEGATIVE
			'Log("Negative Button pressed")
			'ToastMessageShow(Action, False)
		Case Dialog.ACTION_NEUTRAL
			'Log("Neutral Button pressed")
			'ToastMessageShow(Action, False)
	End Select
End Sub

Sub ab2_Click
	ex_pan
End Sub

Sub file_check
	Dim s As String = extra2.Get(1)
	Log("pak: "&s)
	name=pak.GetApplicationLabel(s)
	Dim d1,d2,master As String
	d1=File.DirRootExternal&"/APEX"
	d2=datas.GetSimple("0")
	If datas.ContainsKey("0") Then
		master=d2
	End If
	If File.Exists(master,s&".apk") Then
		int_folder
	Else
		start
		ex_pan2
	End If  
End Sub 

Sub ab1_Click
	Dim res As Int
	Bname.Enabled=True 
	Bpath.Enabled=True 

	Bname.Text=extra2.Get(0)
	Bpath.Text="to: "&datas.GetSimple("0")
	Bcontent.Text=Label5.text&", "&extra2.Get(1)
	dias.AddView(bpannel,90%x,20%y)
	dias.Show("Backup the app?","Yes","","Cancel",icon.Bitmap)
	If dias.Response = DialogResponse.POSITIVE Then
		file_check
	Else
		ex_pan
	End If
	
End Sub

Sub start
	If tim.Enabled=False Then
		tim.Enabled=True
		lvt.Visible=True
	Else
		tim.Enabled=False
		ti_start
	End If
End Sub

Sub ti_start
	tim.Enabled=True
End Sub

Sub ab3_Click
	tim.Enabled=False
	Panel2.Visible=False	
End Sub

Sub ex_pan
	If Panel1.Visible=True Then
		Panel1.Visible=False
		ListView1.Enabled=True
	Else
		Panel1.Visible=True
		ListView1.Enabled=False
	End If
End Sub 

Sub ex_pan2
	If Panel2.Visible=False Then
		Panel1.Visible=False
		Panel2.Visible=True
		ListView1.Enabled=False
		Else
			Panel2.Visible=False
		ListView1.Enabled=True
	End If
End Sub


Sub apps_start
	
	ListView1.Clear
	extra.Clear
	applist=pak.GetInstalledPackages
	Obj1.Target = Obj1.GetContext
	Obj1.Target = Obj1.RunMethod("getPackageManager") ' PackageManager
	Obj2.Target = Obj1.RunMethod2("getInstalledPackages", 0, "java.lang.int") ' List<PackageInfo>
	size = Obj2.RunMethod("size")
	For i = 0 To size -1
		Obj3.Target = Obj2.RunMethod2("get", i, "java.lang.int") ' PackageInfo
		size = Obj2.RunMethod("size")
		Obj3.Target = Obj3.GetField("applicationInfo") ' ApplicationInfo
		flags = Obj3.GetField("flags")
		packName = Obj3.GetField("packageName")
		If Bit.And(flags, 1)  = 0 Then
			'app is not in the system image
			args(0) = Obj3.Target
			Types(0) = "android.content.pm.ApplicationInfo"
			name = Obj1.RunMethod4("getApplicationLabel", args, Types)
			icon = Obj1.RunMethod4("getApplicationIcon", args, Types)
			apath= GetParentPath(GetSourceDir(GetActivitiesInfo(packName)))
			Dim total As String
			total = File.Size(GetParentPath(GetSourceDir(GetActivitiesInfo(packName))),GetFileName(GetSourceDir(GetActivitiesInfo(packName))))
			ListView1.AddTwoLinesAndBitmap2(name,packName&", "&FormatFileSize(total),icon.Bitmap,packName)
			extra.Add(packName)
		End If
	Next
End Sub

Sub SetDivider(lv As ListView, Color As Int, Height As Int)
	Dim r As Reflector
	r.Target = lv
	Dim CD As ColorDrawable
	CD.Initialize(Color, 0)
	r.RunMethod4("setDivider", Array As Object(CD), Array As String("android.graphics.drawable.Drawable"))
	r.RunMethod2("setDividerHeight", Height, "java.lang.int")
End Sub

Sub GetPermissions(Package As String) As String()
	Dim r As Reflector
	r.Target = r.GetContext
	r.Target = r.RunMethod("getPackageManager")
	'get PacakgeInfo
	r.Target = r.RunMethod4("getPackageInfo", Array As Object(Package, 0x00001000), _
      Array As String("java.lang.String", "java.lang.int"))
	Dim permissions() As String
	permissions = r.GetField("requestedPermissions")
	If permissions = Null Then
		Dim permissions(0) As String
	End If
	Return permissions
End Sub
Sub ConvertToTimeFormat(ms As Int) As String
	Dim seconds, minutes As Int
	seconds = Round(ms / 1000)
	minutes = Floor(seconds / 60)
	seconds = seconds Mod 60
	Return NumberFormat(minutes, 1, 0) & ":" & NumberFormat(seconds, 2, 0) 'ex: 3:05
End Sub
Sub minutes_hours ( ms As Int ) As String
	Dim val,hours,minutes As Int
	val = ms
	hours = Floor(val / 60)
	minutes = val Mod 60
	Return NumberFormat(hours, 1, 0) & ":" & NumberFormat(minutes, 2, 0)
End Sub

Sub FormatFileSize(Bytes As Float) As String
   
	Private Unit() As String = Array As String(" Byte", " KB", " MB", " GB", " TB", " PB", " EB", " ZB", " YB")
   
	If Bytes = 0 Then
		Return "0 Bytes"
	Else
		Private Po, Si As Double
		Private I As Int
		Bytes = Abs(Bytes)
		I = Floor(Logarithm(Bytes, 1024))
		Po = Power(1024, I)
		Si = Bytes / Po
		Return NumberFormat(Si, 1, 2) & Unit(I)
	End If
End Sub

Sub GetFileName(FullPath As String) As String
	Return FullPath.SubString(FullPath.LastIndexOf("/")+1)
End Sub


Sub GetParentPath(path As String) As String
	Dim Path1 As String
	If path = "/" Then
		Return "/"
	End If
	L = path.LastIndexOf("/")
	If L = path.Length - 1 Then
		'Strip the last slash
		Path1 = path.SubString2(0,L)
	Else
		Path1 = path
	End If
	L = path.LastIndexOf("/")
	If L = 0 Then
		L = 1
	End If
	Return Path1.SubString2(0,L)
End Sub

Sub GetActivitiesInfo(package As String) As Object
	Dim r As Reflector
	r.Target = r.GetContext
	r.Target = r.RunMethod("getPackageManager")
	r.Target = r.RunMethod3("getPackageInfo", package, "java.lang.String", 0x00000001, "java.lang.int")
	Return r.GetField("applicationInfo")
End Sub

Sub GetSourceDir(AppInfo As Object) As String
	Try
		Dim r As Reflector
		r.Target = AppInfo
		Return r.GetField("sourceDir")
	Catch
		Return ""
	End Try
End Sub

Sub get_respath(package As String) As Object
	Dim r As Reflector
	r.Target = r.GetContext
	r.Target = r.RunMethod("getPackageManager")
	r.Target = r.RunMethod3("getApplicationInfo", package, "java.lang.String", 0x00000001, "java.lang.int")
	Return r.GetField("dataDir")
End Sub


Sub toolbar_NavigationItemClick
	
End Sub
